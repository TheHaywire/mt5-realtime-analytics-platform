#!/usr/bin/env python3\n\"\"\"\nPydantic schemas for request/response models\nData validation and serialization for the API\n\"\"\"\n\nfrom pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional, List, Dict, Any\nfrom datetime import datetime\nfrom enum import Enum\n\n# User schemas\nclass UserCreate(BaseModel):\n    email: EmailStr\n    password: str = Field(..., min_length=8)\n    plan: str = Field(default=\"free\")\n\nclass UserResponse(BaseModel):\n    id: int\n    email: str\n    plan: str\n    is_active: bool\n    created_at: datetime\n    api_key: str\n    \n    class Config:\n        from_attributes = True\n\n# Strategy schemas\nclass StrategyConfig(BaseModel):\n    name: str\n    description: Optional[str] = None\n    strategy_type: str  # time_based, pattern, custom\n    config: Dict[str, Any]  # Strategy-specific configuration\n    is_active: bool = True\n\nclass StrategyResponse(BaseModel):\n    id: int\n    name: str\n    description: Optional[str]\n    strategy_type: str\n    is_active: bool\n    total_trades: int\n    winning_trades: int\n    total_pnl: float\n    created_at: datetime\n    \n    class Config:\n        from_attributes = True\n\n# Market data schemas\nclass TickData(BaseModel):\n    symbol: str\n    timestamp: datetime\n    bid: float\n    ask: float\n    volume: Optional[int] = None\n    spread: Optional[float] = None\n\nclass BarData(BaseModel):\n    symbol: str\n    timeframe: str\n    timestamp: datetime\n    open_price: float\n    high_price: float\n    low_price: float\n    close_price: float\n    volume: int\n    spread: Optional[float] = None\n    \n    class Config:\n        from_attributes = True\n\n# Analytics schemas\nclass EdgeData(BaseModel):\n    symbol: str\n    edge_type: str\n    pattern_key: str\n    win_rate: float\n    confidence_level: float\n    sample_size: int\n    avg_return: float\n    is_significant: bool\n    discovered_at: datetime\n\nclass HeatmapData(BaseModel):\n    symbol: str\n    hours: List[int]\n    days: List[str]\n    data: List[List[Dict[str, float]]]\n    generated_at: datetime\n\n# Alert schemas\nclass AlertRule(BaseModel):\n    name: str\n    description: Optional[str] = None\n    alert_type: str\n    conditions: Dict[str, Any]\n    channels: str  # comma-separated\n    webhook_url: Optional[str] = None\n    cooldown_minutes: int = 30\n    is_active: bool = True\n\nclass AlertResponse(BaseModel):\n    id: int\n    name: str\n    alert_type: str\n    is_active: bool\n    total_triggers: int\n    last_triggered: Optional[datetime]\n    created_at: datetime\n    \n    class Config:\n        from_attributes = True\n\n# WebSocket message schemas\nclass WSMessage(BaseModel):\n    type: str\n    timestamp: datetime\n    data: Optional[Dict[str, Any]] = None\n\nclass LiveDataMessage(WSMessage):\n    type: str = \"live_data\"\n    market_status: str\n    total_patterns: int\n    significant_edges: int\n    best_edge: Optional[Dict[str, Any]]\n    volatility_level: float\n\n# API response schemas\nclass APIResponse(BaseModel):\n    success: bool\n    message: str\n    data: Optional[Any] = None\n    timestamp: datetime = Field(default_factory=datetime.utcnow)\n\nclass ErrorResponse(BaseModel):\n    error: str\n    detail: Optional[str] = None\n    status_code: int\n    timestamp: datetime = Field(default_factory=datetime.utcnow)\n\n# Subscription and billing\nclass PlanEnum(str, Enum):\n    FREE = \"free\"\n    PRO = \"pro\" \n    ENTERPRISE = \"enterprise\"\n\nclass UsageStats(BaseModel):\n    user_id: int\n    api_calls_today: int\n    api_calls_month: int\n    rate_limit: int\n    plan: PlanEnum\n    billing_cycle_start: datetime\n    billing_cycle_end: datetime