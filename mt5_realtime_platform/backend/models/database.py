#!/usr/bin/env python3\n\"\"\"\nDatabase models and connection setup for MT5 Real-Time Analytics Platform\nSQLAlchemy ORM models for users, strategies, bars, alerts, and analytics data\n\"\"\"\n\nfrom sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Boolean, Text, ForeignKey, Index\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom sqlalchemy.sql import func\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\n\n# Database configuration\nDATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///./mt5_analytics.db')\n\n# Ensure data directory exists for SQLite\nif DATABASE_URL.startswith('sqlite'):\n    db_path = DATABASE_URL.replace('sqlite:///', '')\n    Path(db_path).parent.mkdir(parents=True, exist_ok=True)\n\n# Create engine with optimized settings\nengine = create_engine(\n    DATABASE_URL,\n    echo=False,  # Set to True for SQL debugging\n    pool_pre_ping=True,\n    pool_recycle=3600,  # Recycle connections every hour\n    connect_args={\"check_same_thread\": False} if \"sqlite\" in DATABASE_URL else {}\n)\n\n# Session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Base class for all models\nBase = declarative_base()\n\nclass User(Base):\n    \"\"\"\n    User accounts for SaaS platform\n    Supports free, pro, and enterprise tiers\n    \"\"\"\n    __tablename__ = \"users\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    api_key = Column(String, unique=True, index=True, nullable=False)\n    \n    # Subscription info\n    plan = Column(String, default=\"free\")  # free, pro, enterprise\n    rate_limit = Column(Integer, default=100)  # API calls per hour\n    \n    # Account status\n    is_active = Column(Boolean, default=True)\n    is_verified = Column(Boolean, default=False)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=func.now())\n    last_login = Column(DateTime)\n    \n    # Relationships\n    strategies = relationship(\"Strategy\", back_populates=\"user\")\n    alerts = relationship(\"Alert\", back_populates=\"user\")\n    api_usage = relationship(\"APIUsage\", back_populates=\"user\")\n\nclass BarData(Base):\n    \"\"\"\n    OHLCV bar data from MT5\n    Stores 1-minute bars aggregated from tick data\n    \"\"\"\n    __tablename__ = \"bar_data\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    symbol = Column(String, index=True, nullable=False)\n    timeframe = Column(String, nullable=False)\n    \n    # OHLCV data\n    open_price = Column(Float, nullable=False)\n    high_price = Column(Float, nullable=False) \n    low_price = Column(Float, nullable=False)\n    close_price = Column(Float, nullable=False)\n    volume = Column(Integer, nullable=False)\n    \n    # Additional data\n    spread = Column(Float)\n    tick_count = Column(Integer)\n    \n    # Timestamps\n    timestamp = Column(DateTime, index=True, nullable=False)  # Bar timestamp\n    created_at = Column(DateTime, default=func.now())  # Database insert time\n    \n    # Indexes for performance\n    __table_args__ = (\n        Index('ix_bar_symbol_timestamp', 'symbol', 'timestamp'),\n        Index('ix_bar_timeframe_timestamp', 'timeframe', 'timestamp'),\n    )\n\nclass TickData(Base):\n    \"\"\"\n    Raw tick data from MT5 (optional storage)\n    For high-frequency analysis and validation\n    \"\"\"\n    __tablename__ = \"tick_data\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    symbol = Column(String, index=True, nullable=False)\n    \n    # Tick data\n    bid = Column(Float, nullable=False)\n    ask = Column(Float, nullable=False)\n    volume = Column(Integer)\n    spread = Column(Float)\n    \n    # Timestamps\n    timestamp = Column(DateTime, index=True, nullable=False)\n    created_at = Column(DateTime, default=func.now())\n\nclass Strategy(Base):\n    \"\"\"\n    User-defined trading strategies\n    Configuration and performance tracking\n    \"\"\"\n    __tablename__ = \"strategies\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    \n    # Strategy info\n    name = Column(String, nullable=False)\n    description = Column(Text)\n    strategy_type = Column(String, nullable=False)  # time_based, pattern, custom\n    \n    # Configuration (JSON stored as text)\n    config = Column(Text, nullable=False)  # JSON string\n    \n    # Status and performance\n    is_active = Column(Boolean, default=True)\n    total_trades = Column(Integer, default=0)\n    winning_trades = Column(Integer, default=0)\n    total_pnl = Column(Float, default=0.0)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=func.now())\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"strategies\")\n    trades = relationship(\"Trade\", back_populates=\"strategy\")\n\nclass Trade(Base):\n    \"\"\"\n    Individual trade executions and backtests\n    Links to strategies for performance tracking\n    \"\"\"\n    __tablename__ = \"trades\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    strategy_id = Column(Integer, ForeignKey(\"strategies.id\"), nullable=False)\n    \n    # Trade details\n    symbol = Column(String, nullable=False)\n    direction = Column(String, nullable=False)  # long, short\n    entry_price = Column(Float, nullable=False)\n    exit_price = Column(Float)\n    position_size = Column(Float, nullable=False)\n    \n    # P&L and metrics\n    pnl_pips = Column(Float)\n    pnl_dollars = Column(Float)\n    pnl_percentage = Column(Float)\n    \n    # Trade timing\n    entry_time = Column(DateTime, nullable=False)\n    exit_time = Column(DateTime)\n    duration_minutes = Column(Integer)\n    \n    # Market conditions\n    entry_spread = Column(Float)\n    exit_spread = Column(Float)\n    market_volatility = Column(Float)\n    \n    # Status\n    status = Column(String, default=\"open\")  # open, closed, cancelled\n    is_backtest = Column(Boolean, default=True)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=func.now())\n    \n    # Relationships\n    strategy = relationship(\"Strategy\", back_populates=\"trades\")\n\nclass StatisticalEdge(Base):\n    \"\"\"\n    Discovered statistical edges and patterns\n    Time-based and pattern-based analysis results\n    \"\"\"\n    __tablename__ = \"statistical_edges\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    \n    # Edge identification\n    symbol = Column(String, nullable=False)\n    edge_type = Column(String, nullable=False)  # time_of_day, day_of_week, pattern\n    pattern_key = Column(String, nullable=False)  # e.g., \"03:17\", \"Friday\", \"breakout\"\n    \n    # Statistical metrics\n    win_rate = Column(Float, nullable=False)\n    confidence_level = Column(Float, nullable=False)  # p-value based\n    sample_size = Column(Integer, nullable=False)\n    avg_return = Column(Float, nullable=False)\n    volatility = Column(Float)\n    sharpe_ratio = Column(Float)\n    max_drawdown = Column(Float)\n    \n    # Edge strength and significance\n    edge_strength = Column(Float, nullable=False)  # Combined metric\n    is_significant = Column(Boolean, default=False)\n    z_score = Column(Float)\n    p_value = Column(Float)\n    \n    # Analysis period\n    start_date = Column(DateTime, nullable=False)\n    end_date = Column(DateTime, nullable=False)\n    timeframe = Column(String, nullable=False)\n    \n    # Timestamps\n    discovered_at = Column(DateTime, default=func.now())\n    last_validated = Column(DateTime, default=func.now())\n    \n    # Indexes\n    __table_args__ = (\n        Index('ix_edge_symbol_type', 'symbol', 'edge_type'),\n        Index('ix_edge_pattern_key', 'pattern_key'),\n        Index('ix_edge_discovered', 'discovered_at'),\n    )\n\nclass Alert(Base):\n    \"\"\"\n    User alert configurations and history\n    Email, Telegram, and webhook notifications\n    \"\"\"\n    __tablename__ = \"alerts\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    \n    # Alert configuration\n    name = Column(String, nullable=False)\n    description = Column(Text)\n    alert_type = Column(String, nullable=False)  # edge_discovery, strategy_performance, system\n    \n    # Trigger conditions (JSON)\n    conditions = Column(Text, nullable=False)  # JSON string\n    \n    # Delivery settings\n    channels = Column(String, nullable=False)  # comma-separated: email,telegram,webhook\n    webhook_url = Column(String)\n    \n    # Status and limits\n    is_active = Column(Boolean, default=True)\n    cooldown_minutes = Column(Integer, default=30)\n    max_triggers_per_day = Column(Integer, default=10)\n    \n    # Statistics\n    total_triggers = Column(Integer, default=0)\n    last_triggered = Column(DateTime)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=func.now())\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"alerts\")\n    notifications = relationship(\"Notification\", back_populates=\"alert\")\n\nclass Notification(Base):\n    \"\"\"\n    Alert notification history\n    Tracks sent notifications for analytics\n    \"\"\"\n    __tablename__ = \"notifications\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    alert_id = Column(Integer, ForeignKey(\"alerts.id\"), nullable=False)\n    \n    # Notification details\n    channel = Column(String, nullable=False)  # email, telegram, webhook\n    recipient = Column(String, nullable=False)  # email address, chat_id, webhook_url\n    subject = Column(String)\n    message = Column(Text, nullable=False)\n    \n    # Delivery status\n    status = Column(String, default=\"pending\")  # pending, sent, failed, delivered\n    error_message = Column(Text)\n    \n    # Timestamps\n    created_at = Column(DateTime, default=func.now())\n    sent_at = Column(DateTime)\n    delivered_at = Column(DateTime)\n    \n    # Relationships\n    alert = relationship(\"Alert\", back_populates=\"notifications\")\n\nclass APIUsage(Base):\n    \"\"\"\n    API usage tracking for rate limiting and analytics\n    Tracks user API calls and billing\n    \"\"\"\n    __tablename__ = \"api_usage\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    \n    # Request details\n    endpoint = Column(String, nullable=False)\n    method = Column(String, nullable=False)\n    ip_address = Column(String)\n    user_agent = Column(String)\n    \n    # Response details\n    status_code = Column(Integer, nullable=False)\n    response_time_ms = Column(Integer)\n    \n    # Usage tracking\n    api_key_used = Column(String, index=True)\n    timestamp = Column(DateTime, default=func.now(), index=True)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"api_usage\")\n    \n    # Indexes for performance\n    __table_args__ = (\n        Index('ix_usage_user_timestamp', 'user_id', 'timestamp'),\n        Index('ix_usage_endpoint_timestamp', 'endpoint', 'timestamp'),\n    )\n\nclass SystemMetric(Base):\n    \"\"\"\n    System performance and health metrics\n    For monitoring and analytics\n    \"\"\"\n    __tablename__ = \"system_metrics\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    \n    # Metric details\n    metric_name = Column(String, nullable=False, index=True)\n    metric_value = Column(Float, nullable=False)\n    metric_unit = Column(String)  # requests/sec, %, MB, etc.\n    \n    # Context\n    component = Column(String)  # api, websocket, analytics, mt5\n    tags = Column(String)  # JSON string for additional metadata\n    \n    # Timestamp\n    timestamp = Column(DateTime, default=func.now(), index=True)\n    \n    # Indexes\n    __table_args__ = (\n        Index('ix_metric_name_timestamp', 'metric_name', 'timestamp'),\n        Index('ix_metric_component_timestamp', 'component', 'timestamp'),\n    )\n\n# Database utility functions\ndef get_db():\n    \"\"\"Dependency to get database session\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\ndef init_database():\n    \"\"\"Initialize database with all tables\"\"\"\n    Base.metadata.create_all(bind=engine)\n    print(\"Database initialized successfully\")\n\ndef drop_all_tables():\n    \"\"\"Drop all tables (use with caution)\"\"\"\n    Base.metadata.drop_all(bind=engine)\n    print(\"All tables dropped\")\n\n# Database connection test\ndef test_connection():\n    \"\"\"Test database connection\"\"\"\n    try:\n        db = SessionLocal()\n        # Test query\n        db.execute(\"SELECT 1\")\n        db.close()\n        return True\n    except Exception as e:\n        print(f\"Database connection test failed: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    # Initialize database when run directly\n    print(\"Initializing MT5 Analytics Database...\")\n    init_database()\n    \n    if test_connection():\n        print(\"✅ Database connection successful\")\n    else:\n        print(\"❌ Database connection failed\")\n        \n    print(f\"Database URL: {DATABASE_URL}\")\n    print(\"Database setup complete!\")