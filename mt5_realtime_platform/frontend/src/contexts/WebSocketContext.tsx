import React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface WebSocketContextType {\n  isConnected: boolean;\n  liveData: any;\n  edgeData: any;\n  heatmapData: any;\n  connect: () => void;\n  disconnect: () => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket must be used within WebSocketProvider');\n  }\n  return context;\n};\n\nexport const WebSocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [liveData, setLiveData] = useState<any>({});\n  const [edgeData, setEdgeData] = useState<any>({});\n  const [heatmapData, setHeatmapData] = useState<any>({});\n\n  const connect = () => {\n    const ws = new WebSocket('ws://localhost:8000/ws/live-data');\n    \n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log('WebSocket connected');\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        switch (data.type) {\n          case 'live_data':\n            setLiveData(data.data);\n            break;\n          case 'edges_update':\n            setEdgeData(data.edges);\n            break;\n          case 'heatmap_update':\n            setHeatmapData(data.heatmap);\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message parsing error:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket disconnected');\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    setSocket(ws);\n  };\n\n  const disconnect = () => {\n    if (socket) {\n      socket.close();\n      setSocket(null);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n    return () => disconnect();\n  }, []);\n\n  return (\n    <WebSocketContext.Provider value={{\n      isConnected,\n      liveData,\n      edgeData,\n      heatmapData,\n      connect,\n      disconnect\n    }}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};