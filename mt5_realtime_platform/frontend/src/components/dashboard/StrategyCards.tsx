import React from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  ClockIcon, \n  TrendingUpIcon, \n  TrendingDownIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon\n} from '@heroicons/react/24/outline';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\nimport { formatPercentage } from '../../utils/formatUtils';\n\ninterface Strategy {\n  name: string;\n  sample_size: number;\n  win_rate: number;\n  confidence: number;\n  avg_return: number;\n  sharpe: number;\n  max_drawdown: number;\n  total_return: number;\n  is_significant: boolean;\n  last_updated: string;\n  status?: string;\n}\n\ninterface StrategyCardsProps {\n  className?: string;\n}\n\nconst strategyConfigs = {\n  'am_edge_0317': {\n    title: '03:17 AM Edge',\n    description: 'Long positions from 01:00 to 03:17 IST',\n    icon: ClockIcon,\n    color: 'blue',\n    timeRange: '01:00 - 03:17 IST'\n  },\n  'friday_long': {\n    title: 'Friday Gold Rush',\n    description: 'Full-day Friday long bias strategy',\n    icon: TrendingUpIcon,\n    color: 'green',\n    timeRange: 'Full Friday Session'\n  },\n  'wednesday_short': {\n    title: 'Wednesday Fade',\n    description: 'Short positions during Wednesday weakness',\n    icon: TrendingDownIcon,\n    color: 'red',\n    timeRange: '09:00 - 17:00 IST'\n  }\n};\n\nexport const StrategyCards: React.FC<StrategyCardsProps> = ({ className = '' }) => {\n  const { edgeData, isConnected } = useWebSocket();\n  \n  const strategies = edgeData?.strategies || {};\n\n  const getColorClasses = (color: string) => {\n    switch (color) {\n      case 'blue':\n        return {\n          border: 'border-blue-200',\n          bg: 'bg-blue-50',\n          icon: 'text-blue-600',\n          accent: 'bg-blue-600'\n        };\n      case 'green':\n        return {\n          border: 'border-green-200',\n          bg: 'bg-green-50',\n          icon: 'text-green-600',\n          accent: 'bg-green-600'\n        };\n      case 'red':\n        return {\n          border: 'border-red-200',\n          bg: 'bg-red-50',\n          icon: 'text-red-600',\n          accent: 'bg-red-600'\n        };\n      default:\n        return {\n          border: 'border-gray-200',\n          bg: 'bg-gray-50',\n          icon: 'text-gray-600',\n          accent: 'bg-gray-600'\n        };\n    }\n  };\n\n  const renderStrategyCard = (strategyId: string, strategy: Strategy, index: number) => {\n    const config = strategyConfigs[strategyId as keyof typeof strategyConfigs];\n    if (!config) return null;\n\n    const colors = getColorClasses(config.color);\n    const IconComponent = config.icon;\n    \n    const hasInsufficientData = strategy.status === 'insufficient_data';\n    const isStatisticallySignificant = strategy.is_significant && !hasInsufficientData;\n\n    return (\n      <motion.div\n        key={strategyId}\n        className={`bg-white rounded-lg shadow-lg border ${colors.border} overflow-hidden`}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: index * 0.1 }}\n        whileHover={{ y: -2, transition: { duration: 0.2 } }}\n      >\n        {/* Card header with strategy info */}\n        <div className={`${colors.bg} px-6 py-4 border-b border-gray-200`}>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`${colors.accent} p-2 rounded-lg`}>\n                <IconComponent className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">{config.title}</h3>\n                <p className=\"text-sm text-gray-600\">{config.timeRange}</p>\n              </div>\n            </div>\n            \n            {/* Status indicator */}\n            <div className=\"flex items-center space-x-2\">\n              {isStatisticallySignificant ? (\n                <CheckCircleIcon className=\"w-5 h-5 text-green-500\" />\n              ) : hasInsufficientData ? (\n                <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-500\" />\n              ) : (\n                <ExclamationTriangleIcon className=\"w-5 h-5 text-gray-400\" />\n              )}\n              <span className={`text-xs font-medium px-2 py-1 rounded-full ${\n                isStatisticallySignificant ? 'bg-green-100 text-green-700' :\n                hasInsufficientData ? 'bg-yellow-100 text-yellow-700' :\n                'bg-gray-100 text-gray-600'\n              }`}>\n                {isStatisticallySignificant ? 'Significant' :\n                 hasInsufficientData ? 'Insufficient Data' : 'Not Significant'}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Card content */}\n        <div className=\"px-6 py-4\">\n          {hasInsufficientData ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-gray-400 text-4xl mb-2\">ðŸ“Š</div>\n              <div className=\"text-gray-600 font-medium mb-1\">Collecting Data</div>\n              <div className=\"text-gray-500 text-sm\">\n                Need {25 - strategy.sample_size} more samples for analysis\n              </div>\n              <div className=\"mt-3\">\n                <div className=\"bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                    style={{ width: `${(strategy.sample_size / 25) * 100}%` }}\n                  />\n                </div>\n                <div className=\"text-xs text-gray-500 mt-1\">\n                  {strategy.sample_size}/25 samples\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* Key metrics grid */}\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div className=\"text-center\">\n                  <div className={`text-2xl font-bold ${\n                    strategy.win_rate > 0.55 ? 'text-green-600' :\n                    strategy.win_rate < 0.45 ? 'text-red-600' : 'text-gray-600'\n                  }`}>\n                    {formatPercentage(strategy.win_rate)}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Win Rate</div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className={`text-2xl font-bold ${\n                    strategy.avg_return > 0 ? 'text-green-600' : \n                    strategy.avg_return < 0 ? 'text-red-600' : 'text-gray-600'\n                  }`}>\n                    {strategy.avg_return > 0 ? '+' : ''}{(strategy.avg_return * 100).toFixed(2)}%\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Avg Return</div>\n                </div>\n              </div>\n\n              {/* Secondary metrics */}\n              <div className=\"space-y-3 mb-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Confidence Level:</span>\n                  <span className={`text-sm font-medium ${\n                    strategy.confidence > 0.95 ? 'text-green-600' :\n                    strategy.confidence > 0.8 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {formatPercentage(strategy.confidence)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Sharpe Ratio:</span>\n                  <span className={`text-sm font-medium ${\n                    strategy.sharpe > 1 ? 'text-green-600' :\n                    strategy.sharpe > 0 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {strategy.sharpe.toFixed(2)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Max Drawdown:</span>\n                  <span className=\"text-sm font-medium text-red-600\">\n                    {(strategy.max_drawdown * 100).toFixed(2)}%\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Sample Size:</span>\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    {strategy.sample_size} trades\n                  </span>\n                </div>\n              </div>\n\n              {/* Total return */}\n              <div className=\"pt-4 border-t border-gray-200\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium text-gray-700\">Total Return:</span>\n                  <span className={`text-lg font-bold ${\n                    strategy.total_return > 0 ? 'text-green-600' : \n                    strategy.total_return < 0 ? 'text-red-600' : 'text-gray-600'\n                  }`}>\n                    {strategy.total_return > 0 ? '+' : ''}{(strategy.total_return * 100).toFixed(2)}%\n                  </span>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Footer with last updated */}\n        <div className=\"px-6 py-3 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n            <span>{config.description}</span>\n            {strategy.last_updated && (\n              <span>\n                Updated: {new Date(strategy.last_updated).toLocaleTimeString()}\n              </span>\n            )}\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900\">Strategy Monitor</h2>\n          <p className=\"text-sm text-gray-600\">Real-time performance of discovered patterns</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-3 h-3 rounded-full ${\n            isConnected ? 'bg-green-400' : 'bg-red-400'\n          }`} />\n          <span className=\"text-sm text-gray-600\">\n            {isConnected ? 'Live Updates' : 'Disconnected'}\n          </span>\n        </div>\n      </div>\n\n      {/* Strategy cards grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {Object.entries(strategies).map(([strategyId, strategy], index) => \n          renderStrategyCard(strategyId, strategy as Strategy, index)\n        )}\n      </div>\n\n      {/* No strategies message */}\n      {Object.keys(strategies).length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"text-gray-400 text-6xl mb-4\">ðŸ“ˆ</div>\n          <div className=\"text-gray-600 font-medium mb-2\">No Strategy Data Available</div>\n          <div className=\"text-gray-500 text-sm\">\n            {isConnected ? \n              'Strategies are being analyzed. Please wait for data to accumulate.' :\n              'Connect to start monitoring trading strategies.'\n            }\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};