import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface LiveChartProps {\n  className?: string;\n}\n\nexport const LiveChart: React.FC<LiveChartProps> = ({ className = '' }) => {\n  const { isConnected } = useWebSocket();\n\n  // Generate mock price data\n  const generatePriceData = () => {\n    const now = new Date();\n    const data = [];\n    let price = 2045.50;\n    \n    for (let i = 59; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 60000);\n      price += (Math.random() - 0.5) * 2;\n      data.push({\n        x: time.toLocaleTimeString(),\n        y: price\n      });\n    }\n    return data;\n  };\n\n  const chartData = {\n    labels: generatePriceData().map(d => d.x),\n    datasets: [\n      {\n        label: 'GOLD Price',\n        data: generatePriceData().map(d => d.y),\n        borderColor: 'rgb(234, 179, 8)',\n        backgroundColor: 'rgba(234, 179, 8, 0.1)',\n        tension: 0.1,\n        pointRadius: 1,\n      }\n    ]\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      title: {\n        display: true,\n        text: 'GOLD - Live Price Chart',\n        font: {\n          size: 16,\n          weight: 'bold'\n        }\n      },\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Time (IST)'\n        },\n        ticks: {\n          maxTicksLimit: 10\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Price (USD)'\n        },\n        position: 'right' as const,\n      },\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index' as const,\n    },\n  };\n\n  return (\n    <div className={`bg-white rounded-lg shadow-lg p-6 border border-gray-200 ${className}`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-3 h-3 bg-yellow-500 rounded-full animate-pulse\" />\n          <span className=\"font-medium text-gray-900\">GOLD/USD</span>\n          <span className={`text-sm px-2 py-1 rounded ${\n            isConnected ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'\n          }`}>\n            {isConnected ? 'Live' : 'Demo'}\n          </span>\n        </div>\n        \n        <div className=\"text-right\">\n          <div className=\"text-2xl font-bold text-gray-900\">$2,045.50</div>\n          <div className=\"text-sm text-green-600\">+0.25 (+0.01%)</div>\n        </div>\n      </div>\n      \n      <div className=\"h-full\">\n        <Line data={chartData} options={options} />\n      </div>\n      \n      <div className=\"mt-4 grid grid-cols-4 gap-4 text-sm\">\n        <div>\n          <div className=\"text-gray-500\">Bid</div>\n          <div className=\"font-medium\">2045.35</div>\n        </div>\n        <div>\n          <div className=\"text-gray-500\">Ask</div>\n          <div className=\"font-medium\">2045.65</div>\n        </div>\n        <div>\n          <div className=\"text-gray-500\">Spread</div>\n          <div className=\"font-medium\">0.30</div>\n        </div>\n        <div>\n          <div className=\"text-gray-500\">Volume</div>\n          <div className=\"font-medium\">1.2K</div>\n        </div>\n      </div>\n    </div>\n  );\n};