import React, { useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport { useWebSocket } from '../../contexts/WebSocketContext';\nimport { formatTime } from '../../utils/dateUtils';\n\ninterface HeatmapData {\n  win_rate: number;\n  confidence: number;\n  intensity: number;\n  sample_size: number;\n}\n\ninterface LiveHeatmapProps {\n  className?: string;\n}\n\nexport const LiveHeatmap: React.FC<LiveHeatmapProps> = ({ className = '' }) => {\n  const { heatmapData, isConnected } = useWebSocket();\n\n  const { hours, days, data, maxIntensity } = useMemo(() => {\n    if (!heatmapData?.data) {\n      // Return default empty data\n      const defaultHours = Array.from({ length: 24 }, (_, i) => i);\n      const defaultDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n      const defaultData = Array(24).fill(null).map(() => \n        Array(7).fill(null).map(() => ({\n          win_rate: 50,\n          confidence: 0,\n          intensity: 0,\n          sample_size: 0\n        }))\n      );\n      \n      return {\n        hours: defaultHours,\n        days: defaultDays,\n        data: defaultData,\n        maxIntensity: 1\n      };\n    }\n\n    const maxInt = Math.max(\n      ...heatmapData.data.flat().map((cell: HeatmapData) => cell.intensity)\n    );\n\n    return {\n      hours: heatmapData.hours || Array.from({ length: 24 }, (_, i) => i),\n      days: heatmapData.days || ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n      data: heatmapData.data,\n      maxIntensity: maxInt || 1\n    };\n  }, [heatmapData]);\n\n  const getCellColor = (cell: HeatmapData): string => {\n    if (!cell || cell.sample_size === 0) {\n      return 'bg-gray-100';\n    }\n\n    const winRate = cell.win_rate;\n    const intensity = cell.intensity / maxIntensity;\n    \n    if (winRate > 55) {\n      // Green for win rates above 55%\n      const opacity = Math.min(intensity * 0.8 + 0.2, 1);\n      return `bg-green-500 bg-opacity-${Math.round(opacity * 100)}`;\n    } else if (winRate < 45) {\n      // Red for win rates below 45%\n      const opacity = Math.min(intensity * 0.8 + 0.2, 1);\n      return `bg-red-500 bg-opacity-${Math.round(opacity * 100)}`;\n    } else {\n      // Gray for neutral win rates\n      return 'bg-gray-200';\n    }\n  };\n\n  const getCellStyle = (cell: HeatmapData): React.CSSProperties => {\n    if (!cell || cell.sample_size === 0) {\n      return { backgroundColor: '#f3f4f6' };\n    }\n\n    const winRate = cell.win_rate;\n    const intensity = Math.min(cell.intensity / maxIntensity, 1);\n    \n    if (winRate > 55) {\n      const opacity = Math.min(intensity * 0.8 + 0.2, 1);\n      return { backgroundColor: `rgba(34, 197, 94, ${opacity})` }; // green-500\n    } else if (winRate < 45) {\n      const opacity = Math.min(intensity * 0.8 + 0.2, 1);\n      return { backgroundColor: `rgba(239, 68, 68, ${opacity})` }; // red-500\n    } else {\n      return { backgroundColor: '#e5e7eb' }; // gray-200\n    }\n  };\n\n  const formatCellTooltip = (cell: HeatmapData, hour: number, day: string): string => {\n    if (!cell || cell.sample_size === 0) {\n      return `${day} ${formatTime(hour)}:00\\nNo data available`;\n    }\n\n    return [\n      `${day} ${formatTime(hour)}:00`,\n      `Win Rate: ${cell.win_rate.toFixed(1)}%`,\n      `Confidence: ${(cell.confidence * 100).toFixed(1)}%`,\n      `Samples: ${cell.sample_size}`,\n      cell.confidence > 0.95 ? '✓ Statistically Significant' : '⚠ Not Significant'\n    ].join('\\n');\n  };\n\n  return (\n    <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Win Rate Heatmap</h3>\n          <p className=\"text-sm text-gray-600\">Time-of-day patterns (IST timezone)</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-3 h-3 rounded-full ${\n            isConnected ? 'bg-green-400' : 'bg-red-400'\n          }`} />\n          <span className=\"text-sm text-gray-600\">\n            {isConnected ? 'Live' : 'Disconnected'}\n          </span>\n        </div>\n      </div>\n\n      {/* Heatmap */}\n      <div className=\"overflow-x-auto\">\n        <div className=\"inline-block min-w-full\">\n          {/* Day labels header */}\n          <div className=\"flex mb-2\">\n            <div className=\"w-16\" /> {/* Space for hour labels */}\n            {days.map((day) => (\n              <div\n                key={day}\n                className=\"flex-1 min-w-[60px] text-center text-sm font-medium text-gray-700\"\n              >\n                {day}\n              </div>\n            ))}\n          </div>\n\n          {/* Heatmap grid */}\n          {hours.map((hour) => (\n            <motion.div\n              key={hour}\n              className=\"flex mb-1\"\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.3, delay: hour * 0.01 }}\n            >\n              {/* Hour label */}\n              <div className=\"w-16 flex items-center justify-end pr-3 text-sm text-gray-600\">\n                {formatTime(hour)}:00\n              </div>\n\n              {/* Day cells */}\n              {days.map((day, dayIndex) => {\n                const cell = data[hour]?.[dayIndex];\n                return (\n                  <motion.div\n                    key={`${hour}-${dayIndex}`}\n                    className={`flex-1 min-w-[60px] h-8 border border-gray-200 cursor-pointer\n                      hover:border-gray-400 transition-all duration-200 relative group`}\n                    style={getCellStyle(cell)}\n                    whileHover={{ scale: 1.05 }}\n                    title={formatCellTooltip(cell, hour, day)}\n                  >\n                    {/* Tooltip content - shown on hover */}\n                    <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2\n                      bg-gray-900 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100\n                      transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10\">\n                      {cell && cell.sample_size > 0 ? (\n                        <div>\n                          <div className=\"font-medium\">{day} {formatTime(hour)}:00</div>\n                          <div>Win Rate: {cell.win_rate.toFixed(1)}%</div>\n                          <div>Confidence: {(cell.confidence * 100).toFixed(1)}%</div>\n                          <div>Samples: {cell.sample_size}</div>\n                          {cell.confidence > 0.95 && (\n                            <div className=\"text-green-300\">✓ Significant</div>\n                          )}\n                        </div>\n                      ) : (\n                        <div>No data available</div>\n                      )}\n                    </div>\n\n                    {/* Cell value display */}\n                    {cell && cell.sample_size > 0 && (\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <span className={`text-xs font-medium ${\n                          cell.win_rate > 55 || cell.win_rate < 45 ? 'text-white' : 'text-gray-700'\n                        }`}>\n                          {cell.win_rate.toFixed(0)}\n                        </span>\n                      </div>\n                    )}\n                  </motion.div>\n                );\n              })}\n            </motion.div>\n          ))}\n        </div>\n      </div>\n\n      {/* Legend */}\n      <div className=\"mt-6 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-red-500 rounded\" />\n            <span className=\"text-sm text-gray-600\">Win Rate &lt; 45%</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-gray-200 rounded\" />\n            <span className=\"text-sm text-gray-600\">Neutral (45-55%)</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-green-500 rounded\" />\n            <span className=\"text-sm text-gray-600\">Win Rate &gt; 55%</span>\n          </div>\n        </div>\n        \n        {heatmapData?.generated_at && (\n          <div className=\"text-sm text-gray-500\">\n            Updated: {new Date(heatmapData.generated_at).toLocaleTimeString()}\n          </div>\n        )}\n      </div>\n\n      {/* No data message */}\n      {!isConnected && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"text-gray-400 text-lg mb-2\">⚡</div>\n            <div className=\"text-gray-600 font-medium\">Connecting to live data...</div>\n            <div className=\"text-gray-500 text-sm\">Please wait while we establish connection</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};